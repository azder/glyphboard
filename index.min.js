var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();/** Created by azder on 2017-12-24. */var str=function str(value){return!value?'':''+value};var template=function template(selector){return $($(selector).text())};var infoHide=function infoHide($info){return $info.addClass('d-none').removeClass('alert-primary alert-danger alert-success')};var infoShow=function infoShow(type,$info){return $info.addClass('alert-'+type).removeClass('d-none')};var copy=function copy(){try{return[null,document.execCommand('copy')]}catch(e){return[e,null]}};var $buttonTemplate=template('#gb-template-button');var $glyphs=$('.gb-glyphs').on('click','button',function(event){var $text=$('.gb-text');var $info=infoHide($('.gb-info').empty());var ocopy=$('.gb-opt-copy').prop('checked');$text.val(str($text.val())+str(event.currentTarget.dataset.value));if(ocopy){$text.select();var _copy=copy(),_copy2=_slicedToArray(_copy,2),e=_copy2[0],r=_copy2[1];if(e){infoShow('danger',$info.text('there was problem copying to clipboard: '+e))}else if(!r){infoShow('danger',$info.text('there was a problem copying to clipboard'))}}else{infoShow('primary',$info.text('"copy to clipboard" not selected'))}});// run
fetch('glyphs.json').then(function(response){return response.json().then(function(data){return Object.values(data).map(function(group){group.glyphs.map(function(glyph){var $b=$buttonTemplate.clone().appendTo($glyphs);$b.find('.gb-displayed').html(glyph.display);$b.find('.gb-description').text(glyph.description);$b.attr('data-value',glyph.value);if(glyph.width){$b.removeClass('col-1').addClass('col-'+glyph.width)}})})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0ciIsInZhbHVlIiwidGVtcGxhdGUiLCIkIiwic2VsZWN0b3IiLCJ0ZXh0IiwiaW5mb0hpZGUiLCIkaW5mbyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJpbmZvU2hvdyIsInR5cGUiLCJjb3B5IiwiZG9jdW1lbnQiLCJleGVjQ29tbWFuZCIsImUiLCIkYnV0dG9uVGVtcGxhdGUiLCIkZ2x5cGhzIiwib24iLCIkdGV4dCIsImVtcHR5Iiwib2NvcHkiLCJwcm9wIiwidmFsIiwiZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YXNldCIsInNlbGVjdCIsInIiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJPYmplY3QiLCJ2YWx1ZXMiLCJkYXRhIiwibWFwIiwiZ3JvdXAiLCJnbHlwaHMiLCIkYiIsImNsb25lIiwiYXBwZW5kVG8iLCJmaW5kIiwiaHRtbCIsImdseXBoIiwiZGlzcGxheSIsImRlc2NyaXB0aW9uIiwiYXR0ciIsIndpZHRoIl0sIm1hcHBpbmdzIjoiZ2pCQUFBLHNDQUVBLEdBQU1BLEtBQU0sUUFBTkEsSUFBTSxjQUFTLENBQUNDLEtBQUQsQ0FBUyxFQUFULENBQWMsR0FBS0EsS0FBNUIsQ0FBWixDQUVBLEdBQU1DLFVBQVcsUUFBWEEsU0FBVyxpQkFBWUMsR0FBRUEsRUFBRUMsUUFBRixFQUFZQyxJQUFaLEVBQUYsQ0FBWixDQUFqQixDQUVBLEdBQU1DLFVBQVcsUUFBWEEsU0FBVyxjQUFTQyxPQUFNQyxRQUFOLENBQWUsUUFBZixFQUF5QkMsV0FBekIsQ0FBcUMsMENBQXJDLENBQVQsQ0FBakIsQ0FFQSxHQUFNQyxVQUFXLFFBQVhBLFNBQVcsQ0FBQ0MsSUFBRCxDQUFPSixLQUFQLFFBQWlCQSxPQUFNQyxRQUFOLENBQWUsU0FBV0csSUFBMUIsRUFBZ0NGLFdBQWhDLENBQTRDLFFBQTVDLENBQWpCLENBQWpCLENBRUEsR0FBTUcsTUFDRixRQURFQSxLQUNGLEVBQU0sQ0FDRixHQUFJLENBQ0EsTUFBTyxDQUFDLElBQUQsQ0FBT0MsU0FBU0MsV0FBVCxDQUFxQixNQUFyQixDQUFQLENBQ1YsQ0FBQyxNQUFPQyxDQUFQLENBQVUsQ0FDUixNQUFPLENBQUNBLENBQUQsQ0FBSSxJQUFKLENBQ1YsQ0FDSixDQVBMLENBV0EsR0FBTUMsaUJBQWtCZCxTQUFTLHFCQUFULENBQXhCLENBRUEsR0FBTWUsU0FBVWQsRUFBRSxZQUFGLEVBQWdCZSxFQUFoQixDQUFtQixPQUFuQixDQUE0QixRQUE1QixDQUFzQyxlQUFTLENBRTNELEdBQU1DLE9BQVFoQixFQUFFLFVBQUYsQ0FBZCxDQUNBLEdBQU1JLE9BQVFELFNBQVNILEVBQUUsVUFBRixFQUFjaUIsS0FBZCxFQUFULENBQWQsQ0FDQSxHQUFNQyxPQUFRbEIsRUFBRSxjQUFGLEVBQWtCbUIsSUFBbEIsQ0FBdUIsU0FBdkIsQ0FBZCxDQUVBSCxNQUFNSSxHQUFOLENBQVV2QixJQUFJbUIsTUFBTUksR0FBTixFQUFKLEVBQW1CdkIsSUFBSXdCLE1BQU1DLGFBQU4sQ0FBb0JDLE9BQXBCLENBQTRCekIsS0FBaEMsQ0FBN0IsRUFFQSxHQUFJb0IsS0FBSixDQUFXLENBQ1BGLE1BQU1RLE1BQU4sR0FETyxVQUVRZixNQUZSLGdDQUVBRyxDQUZBLFdBRUdhLENBRkgsV0FHUCxHQUFJYixDQUFKLENBQU8sQ0FDSEwsU0FBUyxRQUFULENBQW1CSCxNQUFNRixJQUFOLENBQVcsMkNBQTZDVSxDQUF4RCxDQUFuQixDQUNILENBRkQsSUFFTyxJQUFJLENBQUNhLENBQUwsQ0FBUSxDQUNYbEIsU0FBUyxRQUFULENBQW1CSCxNQUFNRixJQUFOLENBQVcsMENBQVgsQ0FBbkIsQ0FDSCxDQUNKLENBUkQsSUFRTyxDQUNISyxTQUFTLFNBQVQsQ0FBb0JILE1BQU1GLElBQU4sQ0FBVyxrQ0FBWCxDQUFwQixDQUNILENBRUosQ0FwQmUsQ0FBaEIsQ0FzQkE7QUFDQXdCLE1BQU0sYUFBTixFQUFxQkMsSUFBckIsQ0FBMEIseUJBQVlDLFVBQVNDLElBQVQsR0FBZ0JGLElBQWhCLENBQXFCLHFCQUFRRyxRQUFPQyxNQUFQLENBQWNDLElBQWQsRUFBb0JDLEdBQXBCLENBQXdCLGVBQVMsQ0FFaEdDLE1BQU1DLE1BQU4sQ0FBYUYsR0FBYixDQUFpQixlQUFTLENBQ3RCLEdBQU1HLElBQUt2QixnQkFBZ0J3QixLQUFoQixHQUF3QkMsUUFBeEIsQ0FBaUN4QixPQUFqQyxDQUFYLENBQ0FzQixHQUFHRyxJQUFILENBQVEsZUFBUixFQUF5QkMsSUFBekIsQ0FBOEJDLE1BQU1DLE9BQXBDLEVBQ0FOLEdBQUdHLElBQUgsQ0FBUSxpQkFBUixFQUEyQnJDLElBQTNCLENBQWdDdUMsTUFBTUUsV0FBdEMsRUFDQVAsR0FBR1EsSUFBSCxDQUFRLFlBQVIsQ0FBc0JILE1BQU0zQyxLQUE1QixFQUNBLEdBQUkyQyxNQUFNSSxLQUFWLENBQWlCLENBQ2JULEdBQUc5QixXQUFILENBQWUsT0FBZixFQUF3QkQsUUFBeEIsUUFBd0NvQyxNQUFNSSxLQUE5QyxDQUNILENBQ0osQ0FSRCxDQVVILENBWmtFLENBQVIsQ0FBckIsQ0FBWixDQUExQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDcmVhdGVkIGJ5IGF6ZGVyIG9uIDIwMTctMTItMjQuICovXG5cbmNvbnN0IHN0ciA9IHZhbHVlID0+ICF2YWx1ZSA/ICcnIDogJycgKyB2YWx1ZTtcblxuY29uc3QgdGVtcGxhdGUgPSBzZWxlY3RvciA9PiAkKCQoc2VsZWN0b3IpLnRleHQoKSk7XG5cbmNvbnN0IGluZm9IaWRlID0gJGluZm8gPT4gJGluZm8uYWRkQ2xhc3MoJ2Qtbm9uZScpLnJlbW92ZUNsYXNzKCdhbGVydC1wcmltYXJ5IGFsZXJ0LWRhbmdlciBhbGVydC1zdWNjZXNzJyk7XG5cbmNvbnN0IGluZm9TaG93ID0gKHR5cGUsICRpbmZvKSA9PiAkaW5mby5hZGRDbGFzcygnYWxlcnQtJyArIHR5cGUpLnJlbW92ZUNsYXNzKCdkLW5vbmUnKTtcblxuY29uc3QgY29weSA9IChcbiAgICAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gW251bGwsIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5JyldO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gW2UsIG51bGxdO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuXG5jb25zdCAkYnV0dG9uVGVtcGxhdGUgPSB0ZW1wbGF0ZSgnI2diLXRlbXBsYXRlLWJ1dHRvbicpO1xuXG5jb25zdCAkZ2x5cGhzID0gJCgnLmdiLWdseXBocycpLm9uKCdjbGljaycsICdidXR0b24nLCBldmVudCA9PiB7XG5cbiAgICBjb25zdCAkdGV4dCA9ICQoJy5nYi10ZXh0Jyk7XG4gICAgY29uc3QgJGluZm8gPSBpbmZvSGlkZSgkKCcuZ2ItaW5mbycpLmVtcHR5KCkpO1xuICAgIGNvbnN0IG9jb3B5ID0gJCgnLmdiLW9wdC1jb3B5JykucHJvcCgnY2hlY2tlZCcpO1xuXG4gICAgJHRleHQudmFsKHN0cigkdGV4dC52YWwoKSkgKyBzdHIoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnZhbHVlKSk7XG5cbiAgICBpZiAob2NvcHkpIHtcbiAgICAgICAgJHRleHQuc2VsZWN0KCk7XG4gICAgICAgIGNvbnN0IFtlLCByXSA9IGNvcHkoKTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgIGluZm9TaG93KCdkYW5nZXInLCAkaW5mby50ZXh0KCd0aGVyZSB3YXMgcHJvYmxlbSBjb3B5aW5nIHRvIGNsaXBib2FyZDogJyArIGUpKTtcbiAgICAgICAgfSBlbHNlIGlmICghcikge1xuICAgICAgICAgICAgaW5mb1Nob3coJ2RhbmdlcicsICRpbmZvLnRleHQoJ3RoZXJlIHdhcyBhIHByb2JsZW0gY29weWluZyB0byBjbGlwYm9hcmQnKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmZvU2hvdygncHJpbWFyeScsICRpbmZvLnRleHQoJ1wiY29weSB0byBjbGlwYm9hcmRcIiBub3Qgc2VsZWN0ZWQnKSk7XG4gICAgfVxuXG59KTtcblxuLy8gcnVuXG5mZXRjaCgnZ2x5cGhzLmpzb24nKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS50aGVuKGRhdGEgPT4gT2JqZWN0LnZhbHVlcyhkYXRhKS5tYXAoZ3JvdXAgPT4ge1xuXG4gICAgZ3JvdXAuZ2x5cGhzLm1hcChnbHlwaCA9PiB7XG4gICAgICAgIGNvbnN0ICRiID0gJGJ1dHRvblRlbXBsYXRlLmNsb25lKCkuYXBwZW5kVG8oJGdseXBocyk7XG4gICAgICAgICRiLmZpbmQoJy5nYi1kaXNwbGF5ZWQnKS5odG1sKGdseXBoLmRpc3BsYXkpO1xuICAgICAgICAkYi5maW5kKCcuZ2ItZGVzY3JpcHRpb24nKS50ZXh0KGdseXBoLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgJGIuYXR0cignZGF0YS12YWx1ZScsIGdseXBoLnZhbHVlKTtcbiAgICAgICAgaWYgKGdseXBoLndpZHRoKSB7XG4gICAgICAgICAgICAkYi5yZW1vdmVDbGFzcygnY29sLTEnKS5hZGRDbGFzcyhgY29sLSR7Z2x5cGgud2lkdGh9YClcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KSkpO1xuIl19
