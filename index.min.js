var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();/** Created by azder on 2017-12-24. */var str=function str(value){return!value?'':''+value};var template=function template(selector){return $($(selector).text())};var infoHide=function infoHide($info){return $info.addClass('d-none').removeClass('alert-primary alert-danger alert-success')};var infoShow=function infoShow(type,$info){return $info.addClass('alert-'+type).removeClass('d-none')};var copy=function copy(){try{return[null,document.execCommand('copy')]}catch(e){return[e,null]}};var $buttonTemplate=template('#gb-template-button');var $glyphs=$('.gb-glyphs').on('click','button',function(event){var $text=$('.gb-text');var $info=infoHide($('.gb-info').empty());var ocopy=$('.gb-opt-copy').prop('checked');$text.val(str($text.val())+str(event.currentTarget.dataset.value));if(ocopy){$text.select();var _copy=copy(),_copy2=_slicedToArray(_copy,2),e=_copy2[0],r=_copy2[1];if(e){infoShow('danger',$info.text('there was problem copying to clipboard: '+e))}else if(!r){infoShow('danger',$info.text('there was a problem copying to clipboard'))}}else{infoShow('primary',$info.text('"copy to clipboard" not selected'))}});// run
fetch('glyphs.json').then(function(response){return response.json().then(function(data){return Object.values(data).map(function(group){group.glyphs.map(function(glyph){var $b=$buttonTemplate.clone().appendTo($glyphs);$b.find('.gb-displayed').html(glyph.display);$b.find('.gb-description').text(glyph.description);$b.attr('data-value',glyph.value)})})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0ciIsInZhbHVlIiwidGVtcGxhdGUiLCIkIiwic2VsZWN0b3IiLCJ0ZXh0IiwiaW5mb0hpZGUiLCIkaW5mbyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJpbmZvU2hvdyIsInR5cGUiLCJjb3B5IiwiZG9jdW1lbnQiLCJleGVjQ29tbWFuZCIsImUiLCIkYnV0dG9uVGVtcGxhdGUiLCIkZ2x5cGhzIiwib24iLCIkdGV4dCIsImVtcHR5Iiwib2NvcHkiLCJwcm9wIiwidmFsIiwiZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YXNldCIsInNlbGVjdCIsInIiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJPYmplY3QiLCJ2YWx1ZXMiLCJkYXRhIiwibWFwIiwiZ3JvdXAiLCJnbHlwaHMiLCIkYiIsImNsb25lIiwiYXBwZW5kVG8iLCJmaW5kIiwiaHRtbCIsImdseXBoIiwiZGlzcGxheSIsImRlc2NyaXB0aW9uIiwiYXR0ciJdLCJtYXBwaW5ncyI6ImdqQkFBQSxzQ0FFQSxHQUFNQSxLQUFNLFFBQU5BLElBQU0sY0FBUyxDQUFDQyxLQUFELENBQVMsRUFBVCxDQUFjLEdBQUtBLEtBQTVCLENBQVosQ0FFQSxHQUFNQyxVQUFXLFFBQVhBLFNBQVcsaUJBQVlDLEdBQUVBLEVBQUVDLFFBQUYsRUFBWUMsSUFBWixFQUFGLENBQVosQ0FBakIsQ0FFQSxHQUFNQyxVQUFXLFFBQVhBLFNBQVcsY0FBU0MsT0FBTUMsUUFBTixDQUFlLFFBQWYsRUFBeUJDLFdBQXpCLENBQXFDLDBDQUFyQyxDQUFULENBQWpCLENBRUEsR0FBTUMsVUFBVyxRQUFYQSxTQUFXLENBQUNDLElBQUQsQ0FBT0osS0FBUCxRQUFpQkEsT0FBTUMsUUFBTixDQUFlLFNBQVdHLElBQTFCLEVBQWdDRixXQUFoQyxDQUE0QyxRQUE1QyxDQUFqQixDQUFqQixDQUVBLEdBQU1HLE1BQ0YsUUFERUEsS0FDRixFQUFNLENBQ0YsR0FBSSxDQUNBLE1BQU8sQ0FBQyxJQUFELENBQU9DLFNBQVNDLFdBQVQsQ0FBcUIsTUFBckIsQ0FBUCxDQUNWLENBQUMsTUFBT0MsQ0FBUCxDQUFVLENBQ1IsTUFBTyxDQUFDQSxDQUFELENBQUksSUFBSixDQUNWLENBQ0osQ0FQTCxDQVdBLEdBQU1DLGlCQUFrQmQsU0FBUyxxQkFBVCxDQUF4QixDQUVBLEdBQU1lLFNBQVVkLEVBQUUsWUFBRixFQUFnQmUsRUFBaEIsQ0FBbUIsT0FBbkIsQ0FBNEIsUUFBNUIsQ0FBc0MsZUFBUyxDQUUzRCxHQUFNQyxPQUFRaEIsRUFBRSxVQUFGLENBQWQsQ0FDQSxHQUFNSSxPQUFRRCxTQUFTSCxFQUFFLFVBQUYsRUFBY2lCLEtBQWQsRUFBVCxDQUFkLENBQ0EsR0FBTUMsT0FBUWxCLEVBQUUsY0FBRixFQUFrQm1CLElBQWxCLENBQXVCLFNBQXZCLENBQWQsQ0FFQUgsTUFBTUksR0FBTixDQUFVdkIsSUFBSW1CLE1BQU1JLEdBQU4sRUFBSixFQUFtQnZCLElBQUl3QixNQUFNQyxhQUFOLENBQW9CQyxPQUFwQixDQUE0QnpCLEtBQWhDLENBQTdCLEVBRUEsR0FBSW9CLEtBQUosQ0FBVyxDQUNQRixNQUFNUSxNQUFOLEdBRE8sVUFFUWYsTUFGUixnQ0FFQUcsQ0FGQSxXQUVHYSxDQUZILFdBR1AsR0FBSWIsQ0FBSixDQUFPLENBQ0hMLFNBQVMsUUFBVCxDQUFtQkgsTUFBTUYsSUFBTixDQUFXLDJDQUE2Q1UsQ0FBeEQsQ0FBbkIsQ0FDSCxDQUZELElBRU8sSUFBSSxDQUFDYSxDQUFMLENBQVEsQ0FDWGxCLFNBQVMsUUFBVCxDQUFtQkgsTUFBTUYsSUFBTixDQUFXLDBDQUFYLENBQW5CLENBQ0gsQ0FDSixDQVJELElBUU8sQ0FDSEssU0FBUyxTQUFULENBQW9CSCxNQUFNRixJQUFOLENBQVcsa0NBQVgsQ0FBcEIsQ0FDSCxDQUVKLENBcEJlLENBQWhCLENBc0JBO0FBQ0F3QixNQUFNLGFBQU4sRUFBcUJDLElBQXJCLENBQTBCLHlCQUFZQyxVQUFTQyxJQUFULEdBQWdCRixJQUFoQixDQUFxQixxQkFBUUcsUUFBT0MsTUFBUCxDQUFjQyxJQUFkLEVBQW9CQyxHQUFwQixDQUF3QixlQUFTLENBRWhHQyxNQUFNQyxNQUFOLENBQWFGLEdBQWIsQ0FBaUIsZUFBUyxDQUN0QixHQUFNRyxJQUFLdkIsZ0JBQWdCd0IsS0FBaEIsR0FBd0JDLFFBQXhCLENBQWlDeEIsT0FBakMsQ0FBWCxDQUNBc0IsR0FBR0csSUFBSCxDQUFRLGVBQVIsRUFBeUJDLElBQXpCLENBQThCQyxNQUFNQyxPQUFwQyxFQUNBTixHQUFHRyxJQUFILENBQVEsaUJBQVIsRUFBMkJyQyxJQUEzQixDQUFnQ3VDLE1BQU1FLFdBQXRDLEVBQ0FQLEdBQUdRLElBQUgsQ0FBUSxZQUFSLENBQXNCSCxNQUFNM0MsS0FBNUIsQ0FDSCxDQUxELENBT0gsQ0FUa0UsQ0FBUixDQUFyQixDQUFaLENBQTFCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENyZWF0ZWQgYnkgYXpkZXIgb24gMjAxNy0xMi0yNC4gKi9cblxuY29uc3Qgc3RyID0gdmFsdWUgPT4gIXZhbHVlID8gJycgOiAnJyArIHZhbHVlO1xuXG5jb25zdCB0ZW1wbGF0ZSA9IHNlbGVjdG9yID0+ICQoJChzZWxlY3RvcikudGV4dCgpKTtcblxuY29uc3QgaW5mb0hpZGUgPSAkaW5mbyA9PiAkaW5mby5hZGRDbGFzcygnZC1ub25lJykucmVtb3ZlQ2xhc3MoJ2FsZXJ0LXByaW1hcnkgYWxlcnQtZGFuZ2VyIGFsZXJ0LXN1Y2Nlc3MnKTtcblxuY29uc3QgaW5mb1Nob3cgPSAodHlwZSwgJGluZm8pID0+ICRpbmZvLmFkZENsYXNzKCdhbGVydC0nICsgdHlwZSkucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xuXG5jb25zdCBjb3B5ID0gKFxuICAgICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKV07XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbZSwgbnVsbF07XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5cbmNvbnN0ICRidXR0b25UZW1wbGF0ZSA9IHRlbXBsYXRlKCcjZ2ItdGVtcGxhdGUtYnV0dG9uJyk7XG5cbmNvbnN0ICRnbHlwaHMgPSAkKCcuZ2ItZ2x5cGhzJykub24oJ2NsaWNrJywgJ2J1dHRvbicsIGV2ZW50ID0+IHtcblxuICAgIGNvbnN0ICR0ZXh0ID0gJCgnLmdiLXRleHQnKTtcbiAgICBjb25zdCAkaW5mbyA9IGluZm9IaWRlKCQoJy5nYi1pbmZvJykuZW1wdHkoKSk7XG4gICAgY29uc3Qgb2NvcHkgPSAkKCcuZ2Itb3B0LWNvcHknKS5wcm9wKCdjaGVja2VkJyk7XG5cbiAgICAkdGV4dC52YWwoc3RyKCR0ZXh0LnZhbCgpKSArIHN0cihldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudmFsdWUpKTtcblxuICAgIGlmIChvY29weSkge1xuICAgICAgICAkdGV4dC5zZWxlY3QoKTtcbiAgICAgICAgY29uc3QgW2UsIHJdID0gY29weSgpO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgaW5mb1Nob3coJ2RhbmdlcicsICRpbmZvLnRleHQoJ3RoZXJlIHdhcyBwcm9ibGVtIGNvcHlpbmcgdG8gY2xpcGJvYXJkOiAnICsgZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFyKSB7XG4gICAgICAgICAgICBpbmZvU2hvdygnZGFuZ2VyJywgJGluZm8udGV4dCgndGhlcmUgd2FzIGEgcHJvYmxlbSBjb3B5aW5nIHRvIGNsaXBib2FyZCcpKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZm9TaG93KCdwcmltYXJ5JywgJGluZm8udGV4dCgnXCJjb3B5IHRvIGNsaXBib2FyZFwiIG5vdCBzZWxlY3RlZCcpKTtcbiAgICB9XG5cbn0pO1xuXG4vLyBydW5cbmZldGNoKCdnbHlwaHMuanNvbicpLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLnRoZW4oZGF0YSA9PiBPYmplY3QudmFsdWVzKGRhdGEpLm1hcChncm91cCA9PiB7XG5cbiAgICBncm91cC5nbHlwaHMubWFwKGdseXBoID0+IHtcbiAgICAgICAgY29uc3QgJGIgPSAkYnV0dG9uVGVtcGxhdGUuY2xvbmUoKS5hcHBlbmRUbygkZ2x5cGhzKTtcbiAgICAgICAgJGIuZmluZCgnLmdiLWRpc3BsYXllZCcpLmh0bWwoZ2x5cGguZGlzcGxheSk7XG4gICAgICAgICRiLmZpbmQoJy5nYi1kZXNjcmlwdGlvbicpLnRleHQoZ2x5cGguZGVzY3JpcHRpb24pO1xuICAgICAgICAkYi5hdHRyKCdkYXRhLXZhbHVlJywgZ2x5cGgudmFsdWUpO1xuICAgIH0pO1xuXG59KSkpO1xuIl19
